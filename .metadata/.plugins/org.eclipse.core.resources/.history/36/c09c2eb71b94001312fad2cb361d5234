package climbing_stairs;

/**
 * Climbing Stairs
 * http://oj.leetcode.com/problems/climbing-stairs/
 * You are climbing a stair case. It takes n steps to reach to the top.
 * Each time you can either climb 1 or 2 steps. In how many distinct ways can
 * you climb to the top?
 * Solution: climbStairs(n) = climbStairs(n-1) + climbStairs(n-2)
 * Using a helper array to get rid of repeating computation.
 * Complexity: Time - O(n), Space - O(n)
 * @author CAI Zhe
 */

public class Solution {
  public int climbStairs(int n) {
    if (n < 0)
      return 0;
    if (n < 3)
      return n;
    int[] helper = new int[n];
    for (int i = 0; i < 3; i++) {
      helper[i] = i;
    }
    for (int i = 3; i < n; i++) {
      helper[i] = helper[i - 1] + helper[i - 2];
    }
    return helper[n - 1] + helper[n - 2];
  }
}
