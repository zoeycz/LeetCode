package insert_interval;

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;

public class Solution {
  public ArrayList<Interval> insert(ArrayList<Interval> intervals,
      Interval newInterval) {
    List<Interval> result = new LinkedList<Interval>();
    if (intervals == null || intervals.size() == 0) {
      result.add(newInterval);
      return new ArrayList<Interval>(result);
    }
    int start = newInterval.start;
    int end = newInterval.end;

    boolean requireMerge = false;
    boolean mergedAdded = false;
    for (Interval interval : intervals) {
      if (isOverlapped(interval, newInterval)) {
        requireMerge = true;
        start = Math.min(start, interval.start);
        end = Math.max(end, interval.end);
      } else {
        if (requireMerge && !mergedAdded) {
          result.add(new Interval(start, end));
          mergedAdded = true;
        }
        result.add(interval);
      }
    }
    if (requireMerge && !mergedAdded) {
      result.add(new Interval(start, end));
      mergedAdded = true;
    } else if (!requireMerge) {
      for (int i = 0; i < result.size(); i++) {
        if (result.get(i).start > newInterval.start) {
          result.add(i, newInterval);
          mergedAdded = true;
          break;
        }
      }
    }
    if (!mergedAdded) {
      result.add(newInterval);
    }
    return new ArrayList<Interval>(result);
  }

  boolean isOverlapped(Interval a, Interval b) {
    if (a.end < b.start || b.end < a.start) {
      return false;
    }
    return true;
  }
}