package linked_list_cycle_ii;

/**
 * Given a linked list, return the node where the cycle begins. If there is no
 * cycle, return null.
 * http://oj.leetcode.com/problems/linked-list-cycle-ii/
 * Solution: Use fast & slow pointers. Fast moves two times faster than the
 * slow.
 * @author CAI Zhe
 */
public class Solution {
  public ListNode detectCycle(ListNode head) {
    if (head == null) {
      return null;
    }

    ListNode slow = head;
    ListNode fast = head;
    do {
      slow = slow.next;
      if (fast.next != null) {
        fast = fast.next.next;
      }
      if (fast == null || fast.next == null) {
        return null;
      }
    } while (slow != fast);

    slow = head;
    while (slow != fast) {
      slow = slow.next;
      fast = fast.next;
    }
    return slow;
  }
}